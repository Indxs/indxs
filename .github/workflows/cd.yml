name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Install & Build SSR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, curl, pgsql
          tools: composer

      - name: Install PHP Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Frontend and SSR
        run: npm run build:ssr

  create-env:
    name: Generate .env on Server
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Generate .env via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cat <<EOF > ${{ secrets.DEPLOY_PATH }}/.env
            APP_NAME=${{ vars.APP_NAME }}
            APP_ENV=${{ vars.APP_ENV }}
            APP_KEY=${{ secrets.APP_KEY }}
            APP_DEBUG=${{ vars.APP_DEBUG }}
            APP_TIMEZONE=${{ vars.APP_TIMEZONE }}
            APP_URL=${{ vars.APP_URL }}

            APP_LOCALE=${{ vars.APP_LOCALE }}
            APP_FALLBACK_LOCALE=${{ vars.APP_FALLBACK_LOCALE }}
            APP_FAKER_LOCALE=${{ vars.APP_FAKER_LOCALE }}
            APP_MAINTENANCE_DRIVER=${{ vars.APP_MAINTENANCE_DRIVER }}

            PHP_CLI_SERVER_WORKERS=${{ vars.PHP_CLI_SERVER_WORKERS }}
            BCRYPT_ROUNDS=${{ vars.BCRYPT_ROUNDS }}

            LOG_CHANNEL=${{ vars.LOG_CHANNEL }}
            LOG_STACK=${{ vars.LOG_STACK }}
            LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}

            DB_CONNECTION=pgsql
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            SESSION_DRIVER=${{ vars.SESSION_DRIVER }}
            SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}
            SESSION_ENCRYPT=${{ vars.SESSION_ENCRYPT }}
            SESSION_PATH=${{ vars.SESSION_PATH }}
            SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}

            BROADCAST_CONNECTION=${{ vars.BROADCAST_CONNECTION }}
            FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK }}
            QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION }}
            CACHE_STORE=${{ vars.CACHE_STORE }}
            CACHE_PREFIX=${{ secrets.CACHE_PREFIX }}

            MEMCACHED_HOST=${{ vars.MEMCACHED_HOST }}
            REDIS_CLIENT=${{ vars.REDIS_CLIENT }}
            REDIS_HOST=${{ vars.REDIS_HOST }}
            REDIS_PASSWORD=${{ vars.REDIS_PASSWORD }}
            REDIS_PORT=${{ vars.REDIS_PORT }}

            MAIL_MAILER=${{ vars.MAIL_MAILER }}
            MAIL_FROM_ADDRESS=${{ vars.MAIL_FROM_ADDRESS }}
            MAIL_FROM_NAME=${{ vars.APP_NAME }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}

            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
            AWS_BUCKET=${{ secrets.AWS_BUCKET }}
            AWS_URL=${{ secrets.AWS_URL }}
            AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}

            VITE_APP_NAME=${{ vars.APP_NAME }}

            MODEL_STATUS_COLUMN=${{ vars.MODEL_STATUS_COLUMN }}
            MODEL_STATUS_COLUMN_LENGTH=${{ vars.MODEL_STATUS_COLUMN_LENGTH }}
            MODEL_STATUS_ACTIVE=${{ vars.MODEL_STATUS_ACTIVE }}
            MODEL_STATUS_INACTIVE=${{ vars.MODEL_STATUS_INACTIVE }}

            GHUB_TOKEN=${{ secrets.GHUB_TOKEN }}

            SCOUT_DRIVER=${{ vars.SCOUT_DRIVER }}
            SCOUT_QUEUE=${{ vars.SCOUT_QUEUE }}

            ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }}
            ALGOLIA_SECRET=${{ secrets.ALGOLIA_SECRET }}

            MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}
            VITE_MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}

            GHUB_ID=${{ secrets.GHUB_ID }}
            GHUB_SECRET=${{ secrets.GHUB_SECRET }}
            GHUB_URL=${{ vars.GHUB_URL }}

            SENTRY_LARAVEL_DSN=${{ secrets.SENTRY_LARAVEL_DSN }}
            SENTRY_SEND_DEFAULT_PII=${{ secrets.SENTRY_SEND_DEFAULT_PII }}
            SENTRY_TRACES_SAMPLE_RATE=${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}

            TURNSTILE_SITE_KEY=${{ secrets.TURNSTILE_SITE_KEY }}
            TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}
            VITE_TURNSTILE_SITE_KEY=${{ secrets.TURNSTILE_SITE_KEY }}
            VITE_TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}
            EOF

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: create-env
    environment: production

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            git pull origin main

            COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader
            php artisan migrate --force

            npm ci
            npm run build:ssr

            if pm2 list | grep ssr; then
              pm2 restart ssr
            else
              pm2 start bootstrap/ssr/ssr.js --name=ssr
            fi

            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
